from typing import List, Union
from pydantic import BaseModel
from __future__ import annotations

class Table(BaseModel):
    rows: List[TableRow]

class NestedTable(BaseModel):
    tables: List[Table]

class TableCellContent(BaseModel):
    content: Union[str, NestedTable]

class TableCell(BaseModel):
    contents: List[TableCellContent]

class TableRow(BaseModel):
    cells: List[TableCell]
    is_header: bool

# No need to call update_forward_refs() since we have used __future__.annotations


## Example of a Simple table initialized to the Pydantic object

simple_table = Table(
    rows=[
        TableRow(
            cells=[
                TableCell(contents=[TableCellContent(content="Header 1")]),
                TableCell(contents=[TableCellContent(content="Header 2")])
            ],
            is_header=True
        ),
        TableRow(
            cells=[
                TableCell(contents=[TableCellContent(content="Row 1 Cell 1")]),
                TableCell(contents=[TableCellContent(content="Row 1 Cell 2")])
            ],
            is_header=False
        )
    ]
)


## Example of a Nested Table initalized to the Pydantic object

nested_table = Table(
    rows=[
        TableRow(
            cells=[
                TableCell(contents=[TableCellContent(content="Header 1")]),
                TableCell(contents=[TableCellContent(content="Header 2")])
            ],
            is_header=True
        ),
        TableRow(
            cells=[
                TableCell(contents=[TableCellContent(content="Row 1 Cell 1")]),
                TableCell(contents=[TableCellContent(content="Row 1 Cell 2")])
            ],
            is_header=False
        ),
        TableRow(
            cells=[
                TableCell(contents=[TableCellContent(content="Row 2 Cell 1")]),
                TableCell(contents=[TableCellContent(content=NestedTable(
                    tables=[
                        Table(
                            rows=[
                                TableRow(
                                    cells=[
                                        TableCell(contents=[TableCellContent(content="Nested Header 1")]),
                                        TableCell(contents=[TableCellContent(content="Nested Header 2")])
                                    ],
                                    is_header=True
                                ),
                                TableRow(
                                    cells=[
                                        TableCell(contents=[TableCellContent(content="Nested Row 1 Cell 1")]),
                                        TableCell(contents=[TableCellContent(content="Nested Row 1 Cell 2")])
                                    ],
                                    is_header=False
                                )
                            ]
                        )
                    ]
                ))])
            ],
            is_header=False
        ),
        TableRow(
            cells=[
                TableCell(contents=[TableCellContent(content="Row 3 Cell 1")]),
                TableCell(contents=[TableCellContent(content="Row 3 Cell 2")])
            ],
            is_header=False
        )
    ]
)


###Nested Table with contents before and after Nested table in the cell 



# Existing code for nested_table (as provided)
nested_table = Table(
    rows=[
        TableRow(
            cells=[
                TableCell(contents=[TableCellContent(content="Header 1")]),
                TableCell(contents=[TableCellContent(content="Header 2")])
            ],
            is_header=True
        ),
        TableRow(
            cells=[
                TableCell(contents=[TableCellContent(content="Row 1 Cell 1")]),
                TableCell(contents=[TableCellContent(content="Row 1 Cell 2")])
            ],
            is_header=False
        ),
        TableRow(
            cells=[
                TableCell(contents=[TableCellContent(content="Row 2 Cell 1")]),
                TableCell(contents=[TableCellContent(content=NestedTable(
                    tables=[
                        Table(
                            rows=[
                                TableRow(
                                    cells=[
                                        TableCell(contents=[TableCellContent(content="Nested Header 1")]),
                                        TableCell(contents=[TableCellContent(content="Nested Header 2")])
                                    ],
                                    is_header=True
                                ),
                                TableRow(
                                    cells=[
                                        TableCell(contents=[TableCellContent(content="Nested Row 1 Cell 1")]),
                                        TableCell(contents=[TableCellContent(content="Nested Row 1 Cell 2")])
                                    ],
                                    is_header=False
                                )
                            ]
                        )
                    ]
                ))])
            ],
            is_header=False
        ),
        TableRow(
            cells=[
                TableCell(contents=[TableCellContent(content="Row 3 Cell 1")]),
                TableCell(contents=[TableCellContent(content="Row 3 Cell 2")])
            ],
            is_header=False
        )
    ]
)

# Expanding the nested_table
# Create a new TableRow for the nested table
nested_table_row = TableRow(
    cells=[
        TableCell(contents=[
            TableCellContent(content="Text before nested table")
        ]),
        TableCell(contents=[
            TableCellContent(content=NestedTable(
                tables=[
                    Table(
                        rows=[
                            TableRow(
                                cells=[
                                    TableCell(contents=[TableCellContent(content="Nested Header 1")]),
                                    TableCell(contents=[TableCellContent(content="Nested Header 2")])
                                ],
                                is_header=True
                            ),
                            TableRow(
                                cells=[
                                    TableCell(contents=[TableCellContent(content="Nested Row 1 Cell 1")]),
                                    TableCell(contents=[TableCellContent(content="Nested Row 1 Cell 2")])
                                ],
                                is_header=False
                            )
                        ]
                    )
                ]
            )),
            TableCellContent(content="Text after nested table")
        ])
    ],
    is_header=False
)

# Append the new TableRow to the existing nested_table
nested_table.rows.append(nested_table_row)



## Creating a  basic structure for Parsing tables



from bs4 import BeautifulSoup
from pydantic import BaseModel
from typing import List, Union

class TableCellContent(BaseModel):
    content: Union[str, 'NestedTable']

class TableCell(BaseModel):
    contents: List[TableCellContent]

class TableRow(BaseModel):
    cells: List[TableCell]
    is_header: bool

class Table(BaseModel):
    rows: List[TableRow]

class NestedTable(BaseModel):
    tables: List[Table]

def parse_html(html):
    soup = BeautifulSoup(html, 'html.parser')
    tables = soup.find_all('table')
    parsed_tables = []

    for table in tables:
        parsed_table = parse_table(table)
        if parsed_table:
            parsed_tables.append(parsed_table)

    return parsed_tables

def parse_table(table):
    parsed_table = Table(rows=[])
    rows = table.find_all('tr')

    for row in rows:
        parsed_row = parse_row(row)
        parsed_table.rows.append(parsed_row)

    if not parsed_table.rows:
        return None

    return parsed_table

def parse_row(row):
    cells = row.find_all(['th', 'td'])
    is_header = 'th' in row.name
    parsed_row = TableRow(cells=[], is_header=is_header)

    for cell in cells:
        parsed_cell = parse_cell(cell)
        parsed_row.cells.append(parsed_cell)

    return parsed_row

def parse_cell(cell):
    contents = []

    for content in cell.contents:
        if content.name == 'table':
            nested_table = parse_table(content)
            if nested_table:
                contents.append(TableCellContent(content=NestedTable(tables=[nested_table])))
        else:
            text = content.get_text(strip=True)
            if text:
                contents.append(TableCellContent(content=text))

    return TableCell(contents=contents)

# Example HTML
html = """
<table>
   <tr>
       <th>Header 1</th>
       <th>Header 2</th>
   </tr>
   <tr>
       <td>Row 1 Cell 1</td>
       <td>
           <table>
               <tr>
                   <th>Nested Header 1</th>
                   <th>Nested Header 2</th>
               </tr>
               <tr>
                   <td>Nested Row 1 Cell 1</td>
                   <td>Nested Row 1 Cell 2</td>
               </tr>
           </table>
       Row 1 Cell 2</td>
   </tr>
</table>
"""

parsed_tables = parse_html(html)

for parsed_table in parsed_tables:
    print(parsed_table.json(indent=2))





#######################################Reconsutructing tables#########################



from bs4 import BeautifulSoup

# Function to identify and reconstruct nested tables
def reconstruct_tables(rows):
    tables = []
    current_table = []
    for row in rows:
        cells = row.find_all('td')

        # Identify table boundaries based on rowspan, colspan, and background color
        # Logic to detect table structure and boundaries goes here

        # Append cells to current table
        current_table.append(cells)

        # If you detect end of a table based on your logic:
        if end_of_table:
            tables.append(current_table)
            current_table = []

    # Reconstruct nested tables
    nested_tables = []
    for table_data in tables:
        table_html = '<table>'
        for row in table_data:
            table_html += '<tr>'
            for cell in row:
                # Check if the cell contains nested tables
                nested = cell.find_all('table')
                if nested:
                    for nested_table in nested:
                        # Recursively reconstruct nested tables
                        nested_table_rows = nested_table.find_all('tr')
                        nested_table_html = reconstruct_tables(nested_table_rows)
                        table_html += nested_table_html
                else:
                    table_html += str(cell)
            table_html += '</tr>'
        table_html += '</table>'
        nested_tables.append(table_html)

    return nested_tables

# Assuming html_content contains your HTML data
soup = BeautifulSoup(html_content, 'html.parser')

# Find all table rows
table_rows = soup.find_all('tr')

# Reconstruct tables
final_tables = reconstruct_tables(table_rows)

# Now 'final_tables' contains the corrected HTML for all nested tables
for table in final_tables:
    print(table)




