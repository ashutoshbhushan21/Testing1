iffrom typing import Dict, List, Union

class CustomTextSplitter:
    def __init__(self, splitter_type: SplitterType, splitter_kwargs: dict = None, class_kwargs: dict = None):
        self.splitter_type = splitter_type
        self.splitter_kwargs = splitter_kwargs or {}
        self.class_kwargs = class_kwargs or {}
        self.splitter = None
        self._check_required_libraries()
        self.initialize_splitter()

    def _check_required_libraries(self):
        required_libraries = []
        if self.splitter_type == SplitterType.SENTENCE_TRANSFORMERS:
            required_libraries.append("sentence_transformers")
        elif self.splitter_type == SplitterType.RECURSIVE_CHARACTER:
            required_libraries.append("tiktoken")
        for library in required_libraries:
            try:
                __import__(library)
            except ImportError:
                raise ImportError(f"Library '{library}' is required for the chosen splitter_type but is not installed.")

    def validate_splitter_kwargs(self, splitter_class):
        valid_kwargs = splitter_class.__init__.__code__.co_varnames
        for key in self.splitter_kwargs:
            if key not in valid_kwargs:
                raise ValueError(f"Invalid keyword argument '{key}' for splitter '{splitter_class.__name__}'")

    def initialize_splitter(self):
        if self.splitter_type == SplitterType.SENTENCE_TRANSFORMERS:
            self.validate_splitter_kwargs(SentenceTransformersTokenTextSplitter)
            self.splitter = SentenceTransformersTokenTextSplitter(**self.splitter_kwargs, **self.class_kwargs)
        elif self.splitter_type == SplitterType.RECURSIVE_CHARACTER:
            self.validate_splitter_kwargs(RecursiveCharacterTextSplitter)
            self.splitter = RecursiveCharacterTextSplitter(**self.splitter_kwargs, **self.class_kwargs)
        else:
            raise ValueError("Invalid splitter_type")

    # Rest of the class remains the same

# Usage example:
splitter = CustomTextSplitter(
    splitter_type=SplitterType.SENTENCE_TRANSFORMERS,
    splitter_kwargs={"model_name": "bert-base-uncased"},
    class_kwargs={"region": "Region1", "doc_id": "Doc1", "section_id": "Section1"}
)

input_text = "This is a sample text. Split it into chunks."
result = splitter.split_docs(input_text)
print(result)







..




.from typing import Dict, List, Union

class CustomTextSplitter:
    def __init__(self, splitter_type: SplitterType, splitter_kwargs: dict = None, class_kwargs: dict = None):
        self.splitter_type = splitter_type
        self.splitter_kwargs = splitter_kwargs or {}
        self.class_kwargs = class_kwargs or {}
        self.splitter = None

    def initialize_splitter(self):
        if self.splitter_type == SplitterType.SENTENCE_TRANSFORMERS:
            self.validate_splitter_kwargs(SentenceTransformersTokenTextSplitter)
            self.splitter = SentenceTransformersTokenTextSplitter(**self.splitter_kwargs, **self.class_kwargs)
        elif self.splitter_type == SplitterType.RECURSIVE_CHARACTER:
            self.validate_splitter_kwargs(RecursiveCharacterTextSplitter)
            self.splitter = RecursiveCharacterTextSplitter(**self.splitter_kwargs, **self.class_kwargs)
        else:
            raise ValueError("Invalid splitter_type")

    def validate_splitter_kwargs(self, splitter_class):
        valid_kwargs = splitter_class.__init__.__code__.co_varnames
        for key in self.splitter_kwargs:
            if key not in valid_kwargs:
                raise ValueError(f"Invalid keyword argument '{key}' for splitter '{splitter_class.__name__}'")

    def split_docs(self, input_text: str) -> Dict[str, Dict[str, Union[str, List[str], int]]]:
        if self.splitter is None:
            self.initialize_splitter()
        
        chunks = self.splitter.split_text(input_text)
        
        result = {}
        for chunk_id, chunk_text in enumerate(chunks):
            # You can customize the following code to gather the required information
            # and populate the dictionary with the desired format.
            chunk_info = {
                "DocID": self.class_kwargs.get("doc_id", ""),
                "SectionID": self.class_kwargs.get("section_id", ""),
                "chunktext": chunk_text,
                "token_count": self.splitter.count_tokens(text=chunk_text),
                "region": self.class_kwargs.get("region", ""),
                "document_chunk_ids": [str(i) for i in range(len(chunks))],
                "left_overlap_length": self.splitter.get_left_overlap_length(chunk_id),
                "no_overlap_length": self.splitter.get_no_overlap_length(chunk_id),
                "right_overlap_length": self.splitter.get_right_overlap_length(chunk_id),
            }
            
            result[f"ChunkID{chunk_id}"] = chunk_info
        
        return result

# Usage example:
splitter = CustomTextSplitter(
    splitter_type=SplitterType.SENTENCE_TRANSFORMERS,
    splitter_kwargs={"model_name": "bert-base-uncased"},
    class_kwargs={"region": "Region1", "doc_id": "Doc1", "section_id": "Section1"}
)

input_text = "This is a sample text. Split it into chunks."
result = splitter.split_docs(input_text)
print(result)